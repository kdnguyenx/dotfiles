#!/usr/bin/bash
# install essential tools for my xubuntu development environment
# vim: ft=bash
# -----
set -e

if [[ "$(mokutil --sb-state)" != *"SecureBoot enabled"* ]]; then
  echo "could not determine the secure boot state."
  exit 1
fi

echo '[-] installing prerequisite packages [-]'
sudo apt update && sudo apt upgrade -y
sudo apt install -y curl wget zip zsh git coreutils watch ncdu clang cmake ninja-build

echo '[-] installing window manager [-]'
sudo apt install -y i3 feh picom alacritty network-manager pulseaudio redshift
sudo apt install -y xautolock xbacklight xclip maim xfce4-clipman gnupg2

function linking() {
  ln -sfn $(pwd)/.zshrc ~/.zshrc
  ln -sfn $(pwd)/.zshenv ~/.zshenv
  ln -sfn $(pwd)/.gitignore ~/.gitignore
  ln -sfn $(pwd)/.tmux.conf ~/.tmux.conf
  ln -sfn $(pwd)/.psqlrc ~/.psqlrc
  ln -sfn $(pwd)/.vimrc ~/.vimrc
  ln -sfn $(pwd)/.ideavimrc ~/.ideavimrc

  mkdir -p ${XDG_CONFIG_HOME:=~/.config}
  ln -sfn $(pwd)/i3 $XDG_CONFIG_HOME/i3
  ln -sfn $(pwd)/i3status $XDG_CONFIG_HOME/i3status
  ln -sfn $(pwd)/alacritty $XDG_CONFIG_HOME/alacritty
  ln -sfn $(pwd)/nvim $XDG_CONFIG_HOME/nvim

  mkdir -p $XDG_CONFIG_HOME/gtk-3.0
  cp $(pwd)/templates/settings.ini $XDG_CONFIG_HOME/gtk-3.0/settings.ini
  ln -sfn $(pwd)/.Xresources ~/.Xresources
}
echo '[-] linking dotfiles [-]'
linking

echo '[-] installing extended packages [-]'
sudo apt install -y parallel vim vim-gtk3 tmux golang npm ripgrep jq httpie universal-ctags
mkdir -p ~/.local/bin

echo '[-] downloading git-prompt.sh script [-]'
mkdir -p ~/.zsh/plugins/git/
curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh -o ~/.zsh/plugins/git/git-prompt.sh

target_dir=~/.zsh/zsh-autosuggestions
if [ ! -d "$target_dir" ] ; then
  echo '[-] cloning zsh-autosuggestions [-]'
  git clone https://github.com/zsh-users/zsh-autosuggestions $target_dir
fi

echo '[-] creating essential directories [-]'
mkdir -p ~/personal
mkdir -p ~/repos
mkdir -p ~/opensource
mkdir -p ~/notes

echo '[-] purging snapd [-]'
snaps=$(snap list | awk 'NR>1 {print $1}')
for pkg in $snaps; do
  echo "removing snap package: $pkg"
  sudo snap remove --purge "$pkg"
done
sudo systemctl stop snapd
sudo systemctl disable snapd
sudo apt purge --autoremove -y snapd
sudo apt autoremove -y
sudo rm -rf ~/snap /snap /var/snap /var/lib/snapd /var/cache/snapd
sudo apt-mark hold snapd

if [ ! -f '/etc/apt/sources.list.d/mozilla.list' ]; then
  echo '[-] installing firefox [-]'
  sudo install -d -m 0755 /etc/apt/keyrings
  wget -q https://packages.mozilla.org/apt/repo-signing-key.gpg -O- | sudo tee /etc/apt/keyrings/packages.mozilla.org.asc > /dev/null
  gpg -n -q --import --import-options import-show /etc/apt/keyrings/packages.mozilla.org.asc | awk '/pub/{getline; gsub(/^ +| +$/,""); if($0 == "35BAA0B33E9EB396F59CA838C0BA5CE6DC6315A3") print "\nThe key fingerprint matches ("$0").\n"; else print "\nVerification failed: the fingerprint ("$0") does not match the expected one.\n"}'
  echo "deb [signed-by=/etc/apt/keyrings/packages.mozilla.org.asc] https://packages.mozilla.org/apt mozilla main" | sudo tee -a /etc/apt/sources.list.d/mozilla.list > /dev/null
  echo '
Package: *
Pin: origin packages.mozilla.org
Pin-Priority: 1000
' | sudo tee /etc/apt/preferences.d/mozilla
  sudo apt update -y && sudo apt install -y firefox
fi

target_dir=~/opensource/neovim
if [ ! -d "$target_dir" ] ; then
  echo '[-] building neovim [-]'
  git clone https://github.com/neovim/neovim $target_dir
  cd $target_dir
  git checkout nightly
  make CMAKE_BUILD_TYPE=RelWithDebInfo
  sudo make install
fi

if lspci | grep -E "VGA|3D" | grep -iq "AMD"; then
  if ! command -v -- amdgpu-install > /dev/null 2>&1; then
    echo '[-] installing amdgpu drivers [-]'
    wget https://repo.radeon.com/amdgpu-install/6.3.4/ubuntu/noble/amdgpu-install_6.3.60304-1_all.deb
    sudo dpkg -i amdgpu-install_6.3.60304-1_all.deb
    sudo amdgpu-install --usecase=graphics,rocm -y --vulkan=amdvlk --opencl=rocr
    sudo usermod -a -G render,video $LOGNAME
    rm -f amdgpu-install_6.3.60304-1_all.deb
  fi

  echo '[-] installing steam essential packages [-]'
  sudo dpkg --add-architecture i386
  sudo apt update -y && sudo apt install -y libgl1-mesa-dri:i386 libgl1:i386
  sudo apt install -y policykit-desktop-privileges policykit-1-gnome
fi

if ! command -v -- ibus > /dev/null 2>&1; then
  echo '[-] installing ibus-bamboo [-]'
  sudo add-apt-repository ppa:bamboo-engine/ibus-bamboo -y
  sudo apt update -y && sudo apt install -y ibus ibus-bamboo --install-recommends
fi

target_dir=~/.fzf
if [ ! -d "$target_dir" ] ; then
  echo '[-] installing fzf [-]'
  git clone --depth 1 https://github.com/junegunn/fzf.git $target_dir
  $target_dir/install
fi

current_shell=$(echo $SHELL)
if [ "$current_shell" != "/usr/bin/zsh" ]; then
  echo '[-] change default shell to zsh [-]'
  chsh -s $(which zsh)
fi

echo '[-] Device ready, restart your computer. [-]'
